""" Problem 12: Highly Divisible Triangular Number

https://projecteuler.net/problem=12

Goal: Find the value of the first triangle number to have more
than N divisors.

Constraints: 1 <= N <= 1e3

Triangle Number: a number generated by adding all natural numbers
prior to & including itself.

e.g.: N = 5
      1st = 1 from [1] -> {1}
      2nd = 3 from [1+2] -> {1,3}
      3rd = 6 from [1+2+3] -> {1,2,3,6}
      4th = 10 from [1+2+3+4] -> {1,2,5,10}
      5th = 15 from [1+2+3+4+5] -> {1,3,5,15}
      6th = 21 from [1+2+3+4+5+6] -> {1,3,7,21}
      7th = 28 from [1+2+3+4+5+6+7] -> {1,2,4,7,14,28}
      result = 28
"""
from util.reusable import prime_numbers


def first_triangle_over_N(n):
    if n == 1:
        return 3
    all_primes = prime_numbers(n * 2)
    prime = 3
    divisors_of_n = 2  # min num of divisors of any prime
    count = 0
    while count <= n:
        prime += 1
        n1 = prime
        if n1 % 2 == 0:
            n1 //= 2
        divisors_of_n1 = 1
        for i in range(len(all_primes)):
            # When the prime divisor would be greater than the residual n1,
            # that residual n1 is the last prime factor with an exponent==1,
            # so no need to identify it.
            if all_primes[i] * all_primes[i] > n1:
                divisors_of_n1 *= 2
                break
            exponent = 1
            while n1 % all_primes[i] == 0:
                exponent += 1
                n1 //= all_primes[i]
            if exponent > 1:
                divisors_of_n1 *= exponent
            if n1 == 1:
                break
        count = divisors_of_n * divisors_of_n1
        divisors_of_n = divisors_of_n1
    return prime * (prime - 1) // 2
