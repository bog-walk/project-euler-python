""" Problem 29: Distinct Powers

https://projecteuler.net/problem=29

Goal: Count the distinct terms in a sequence generated by
a^b when 2 <= a <= N and 2 <= b <= N.

Constraints: 2 <= N <= 1e5

e.g.: N = 4
      terms = {4, 8, 16}, {9, 27, 81}, {16, 64, 256}
      count = 8
"""


def distinct_powers_brute(n):
    return len(set([pow(a, b) for b in range(2, n+1) for a in range(2, n+1)]))


def distinct_power(n):
    max_base_power = 0
    for p in range(n):
        if pow(2, p) <= n:
            max_base_power = p
    exponents = [0]*((n + 1)*max_base_power)
    for i in range(1, max_base_power + 1):
        for j in range(1, n+1):
            if exponents[i * j] == 0:
                exponents[i * j] = i
    bases = [0]*(n+1)
    duplicates = 0
    for num in range(2, n+1):
        parent = bases[num]
        if parent == 0:
            power = num * num
            while power <= n:
                bases[power] = num
                power *= num
            continue
        exponent = 0
        reduce = num
        while reduce > 1:
            reduce /= parent
            exponent += 1
        for y in range(2, n+1):
            if exponents[y*exponent] < exponent:
                duplicates += 1
    return pow(n - 1, 2) - duplicates



